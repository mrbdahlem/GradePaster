/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gradepaster;

import java.awt.event.KeyEvent;
import java.awt.AWTException;
import java.awt.Point;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFileChooser;
import java.awt.Robot;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dahlem.brian
 */
public class GradePaster extends javax.swing.JFrame {
    
    private final int nameCol = 0;
    private int sectionCol = -1;
    private int firstGradeCol = 5;
    
    private final int firstStudentRow = 2;
    
    private List<Section> sections;
    
    private List<String> assignmentNames;
    
    private final StudentSelector rangeChoice;
    
    private final Robot robot;
    
    private File lastPath;
            
    /**
     * Creates new form GradePaster
     */
    public GradePaster() throws AWTException {
        initComponents();
        
        rangeChoice = new StudentSelector();
        robot = new Robot();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadButton = new javax.swing.JButton();
        chooserPanel = new javax.swing.JPanel();
        sectionChooser = new javax.swing.JComboBox<>();
        assignmentChooser = new javax.swing.JComboBox<>();
        pasteButton = new javax.swing.JButton();
        studentsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(2147483647, 257));
        setMinimumSize(new java.awt.Dimension(319, 257));

        loadButton.setText("Load .csv");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        chooserPanel.setName(""); // NOI18N

        sectionChooser.setEnabled(false);
        sectionChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionChooserActionPerformed(evt);
            }
        });

        assignmentChooser.setEnabled(false);

        pasteButton.setText("Paste Grades");
        pasteButton.setEnabled(false);
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        studentsButton.setText("Students...");
        studentsButton.setEnabled(false);
        studentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooserPanelLayout = new javax.swing.GroupLayout(chooserPanel);
        chooserPanel.setLayout(chooserPanelLayout);
        chooserPanelLayout.setHorizontalGroup(
            chooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assignmentChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pasteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(chooserPanelLayout.createSequentialGroup()
                        .addComponent(sectionChooser, 0, 375, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        chooserPanelLayout.setVerticalGroup(
            chooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sectionChooser)
                    .addComponent(studentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(assignmentChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pasteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (lastPath != null) {
            fc.setCurrentDirectory(lastPath);
        }
        fc.setFileFilter(new FileNameExtensionFilter("Comma Separated Value (csv) files", "csv"));
        
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            lastPath = file.getParentFile();
            
            String[][] data = CSVUtils.loadCSV(file);
            
            if (data != null && data.length > 0) {
                findSectionCol(data);
                getAssignmentNames(data);
                buildSections(data);
                addStudents(data);
                updateDisplay();
            }
            else {                
                assignmentChooser.setEnabled(false);
                sectionChooser.setEnabled(false);
                pasteButton.setEnabled(false);
                studentsButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        int assignmentNum = assignmentChooser.getSelectedIndex();
        Section section = (Section)sectionChooser.getSelectedItem();
        Student[] students = section.getStudents().toArray(new Student[0]);
        
        try {
            robot.keyPress(KeyEvent.VK_ALT);
            robot.keyPress(KeyEvent.VK_TAB);
            Thread.sleep(10);
            robot.keyRelease(KeyEvent.VK_TAB);
            robot.keyRelease(KeyEvent.VK_ALT);
            Thread.sleep(100);

//            System.out.println ("** " + assignmentNames.get(assignmentNum) + " **");
        
            for(int i = rangeChoice.getFirstStudent();
                i <= rangeChoice.getLastStudent(); i++) {

                String grade = students[i].getGrade(assignmentNum);
                
                try {
                    Double gradeF = Double.parseDouble(grade);
                    grade = String.format("%.2f", gradeF);
                }
                catch (java.lang.NumberFormatException e) {
                    if (grade.toUpperCase().equals("EX")) {
                        grade = "X";
                    }
                    else {
                        System.out.println("\"" + grade + "\"");
                        System.out.println(e.getLocalizedMessage());
                    }
                }
                
//                System.out.print(students[i] + ": ");
//                System.out.println(grade);
                                
                for(int j = 0; j < grade.length(); j++) {
                    robot.keyPress(grade.charAt(j));
                    Thread.sleep(10);
                    robot.keyRelease(grade.charAt(j));
                    Thread.sleep(10);
                }
                robot.keyPress(KeyEvent.VK_ENTER);
                Thread.sleep(10);
                robot.keyRelease(KeyEvent.VK_ENTER);
                Thread.sleep(100);
            }
            
            for(int i = rangeChoice.getFirstStudent();
                i <= rangeChoice.getLastStudent(); i++) {
                robot.keyPress(KeyEvent.VK_UP);
                Thread.sleep(10);
                robot.keyRelease(KeyEvent.VK_UP);
            }
            robot.keyPress(KeyEvent.VK_RIGHT);
            Thread.sleep(10);
            robot.keyRelease(KeyEvent.VK_RIGHT);
        } catch (InterruptedException ex) {

        }
        
        if (assignmentNum < assignmentChooser.getModel().getSize() - 1) {
            assignmentChooser.setSelectedIndex(assignmentNum + 1);
        }
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void studentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentsButtonActionPerformed
        
        Point p = this.getLocation();
        p.translate(this.getWidth(), 0);
        rangeChoice.setLocation(p);
        rangeChoice.setVisible(true);
        
    }//GEN-LAST:event_studentsButtonActionPerformed

    private void sectionChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionChooserActionPerformed
        if (sectionChooser.getItemCount() > 0) {
            Section section = (Section) sectionChooser.getSelectedItem();

            rangeChoice.setStudents(section.getStudents());
        }
    }//GEN-LAST:event_sectionChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradePaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradePaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradePaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradePaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new GradePaster().setVisible(true);
            } catch (AWTException ex) {
                Logger.getLogger(GradePaster.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> assignmentChooser;
    private javax.swing.JPanel chooserPanel;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton pasteButton;
    private javax.swing.JComboBox<Section> sectionChooser;
    private javax.swing.JButton studentsButton;
    // End of variables declaration//GEN-END:variables

    public void updateDisplay() {
        assignmentChooser.removeAllItems();
        sectionChooser.removeAllItems();
        
        for(String assignment : assignmentNames) {
            assignmentChooser.addItem(assignment);
        }
        
        for (Section section : sections) {
            sectionChooser.addItem(section);
        }
        
        assignmentChooser.setEnabled(true);
        sectionChooser.setEnabled(true);
        pasteButton.setEnabled(true);
        studentsButton.setEnabled(true);
    }
    
    private void findSectionCol(String[][] data) {
        for (int i = 0; i < data.length; i++) {
            if (data[0][i].equalsIgnoreCase("Section")) {
                sectionCol = i;
                firstGradeCol = i + 1;
                return;
            }
        }
        
        JOptionPane.showMessageDialog(this, 
                "Could not find a section column in the .csv file.\n" +
                "Make sure you are pasting the correct students.", "File Error",                                
                WARNING_MESSAGE);
        
        sectionCol = -1;
        firstGradeCol = 3;
    }
    
    private void buildSections(String[][] data) {
        sections = new ArrayList<>();
        
        if (sectionCol == -1) {
            sections.add(new Section(""));
            return;
        }
        
        for(int i = firstStudentRow; i < data.length; i++) {
            String sectionName = data[i][sectionCol];
            
            boolean found = false;
            for (Section section : sections) {
                if (section.toString().equals(sectionName)) {
                    found = true;
                    break;
                }
            }
            
            if (!found) {
                sections.add(new Section(sectionName));
            }
        }        
    }

    private void addStudents(String[][] data) {        
        for(int i = firstStudentRow; i < data.length; i++) {
            String name = data[i][nameCol];
            
            String sectionName = "";
            if (sectionCol != -1){
                sectionName = data[i][sectionCol];
            }
            Section section = null;
            
            for (Section s : sections) {
                if (s.toString().equals(sectionName)) {
                    section = s;
                    break;
                }
            }
            
            if (section != null) {
                Student stu = new Student(name, Arrays.copyOfRange(data[i], firstGradeCol, data[i].length));
                section.addStudent(stu);
            }
        }
    }
    
    private void getAssignmentNames(String[][] data) {
        assignmentNames = new ArrayList<>();
        
        for (int i = firstGradeCol; i < data[0].length; i++) {
            assignmentNames.add(data[0][i]);
        }
    }
}
